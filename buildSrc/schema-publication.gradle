apply from: "$rootDir/buildSrc/preconditions.gradle"

checkForProps(taskPath: project.path + ':publishSchema',
              requiredProps: ['sshHost', 'sshUsername', 'sshPrivateKey', 'remoteDocRoot'])

configurations { scpAntTask }
dependencies { scpAntTask("org.apache.ant:ant-jsch:1.8.1") }

/**
 * @author Chris Beams
 */
task publishSchema << {
    def props = new Properties()
    def file = new File("${projectDir}/src/main/resources/META-INF/spring.schemas")
    if (file.exists()) {
        file.withInputStream {
          stream -> props.load(stream)
        }
    }

    if (!props.size()) {
        return
    }

    project.ant {
        taskdef(name: 'scp',
                classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
                classpath: configurations.scpAntTask.asPath)
        taskdef(name: 'sshexec',
                classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec',
                classpath: configurations.scpAntTask.asPath)

        for (def key : props.keySet()) {
            // process only explicitly-versioned entries in the file
            // we'll deal with symlinking to the latest released version
            // later below
            // e.g.:
            //   spring-integration-2.0.xsd
            // but not:
            //   spring-integration.xsd
            if (key =~ /\d\.xsd/) {
                // key entries are formatted as http://www.springframework.org/schema/...
                // strip the protocol and domain, leaving just the path from 'schema' on
                def remotePath = key.substring(key.indexOf('schema/'))
                sshexec(keyfile: sshPrivateKey,
                        host: sshHost,
                        username: sshUsername,
                        command: "mkdir -p `dirname ${remoteDocRoot}/${remotePath}`")
                scp(keyfile: sshPrivateKey,
                    file: "src/main/resources/${props.get(key)}",
                    todir: "${sshUsername}@${sshHost}:${remoteDocRoot}/${remotePath}")
            }
        }
    }

    /*
    def firstKey = props.keySet().iterator().next()
    def path = firstKey.substring(firstKey.indexOf('schema/'))
    def symlinkPath = (path =~ /-\d\.\d/).replaceFirst('')

    println "sshexec ln -s wtf ${symlinkPath}"
    */
}
